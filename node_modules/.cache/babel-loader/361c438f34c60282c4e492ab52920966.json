{"ast":null,"code":"var _jsxFileName = \"/Users/natasha.s.binti.amin/Documents/portfolio/dark-light/src/context/themeContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // Context has been created\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext(false); // Provider\n\nconst ThemeProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [toggle, setToggle] = React.useState(false);\n\n  const toggleFunction = () => {\n    setToggle(!toggle);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      toggle,\n      toggleFunction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"KMOoc8w16Lq5ZnA3xKzfamBycFo=\");\n\n_c = ThemeProvider;\nexport { ThemeContext, ThemeProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/natasha.s.binti.amin/Documents/portfolio/dark-light/src/context/themeContext.jsx"],"names":["React","ThemeContext","createContext","ThemeProvider","children","toggle","setToggle","useState","toggleFunction"],"mappings":";;;AAAA,OAAQA,KAAR,MAAqB,OAArB,C,CACA;;;AACA,MAAOC,YAAY,gBAAKD,KAAK,CAACE,aAAN,CAAoB,KAApB,CAAxB,C,CACA;;AACA,MAAOC,aAAa,GAAK,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACzC,QAAO,CAACC,MAAD,EAASC,SAAT,IAAwBN,KAAK,CAACO,QAAN,CAAe,KAAf,CAA/B;;AACA,QAAMC,cAAc,GAAI,MAAQ;AAChCF,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACH,GAFG;;AAGJ,sBACI,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUG,MAAAA;AAAV,KAA9B;AAAA,cACKJ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKC,CAVD;;GAAOD,a;;KAAAA,a;AAWP,SAAWF,YAAX,EAA0BE,aAA1B","sourcesContent":["import  React  from  \"react\";\n// Context has been created\nconst  ThemeContext  =  React.createContext(false);\n// Provider\nconst  ThemeProvider  =  ({ children })  =>  {\n    const  [toggle, setToggle]  =  React.useState(false);\n    const toggleFunction =  ()  =>  {\n    setToggle(!toggle);\n};\nreturn  (\n    <ThemeContext.Provider value={{ toggle, toggleFunction }}>\n        {children}\n    </ThemeContext.Provider>\n    );\n};\nexport  {  ThemeContext,  ThemeProvider  };"]},"metadata":{},"sourceType":"module"}